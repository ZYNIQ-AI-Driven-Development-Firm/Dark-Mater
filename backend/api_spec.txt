# Model Context Protocol (MCP) Client - Backend API Specification

This document outlines the API endpoints required for the MCP client frontend.

---
## 1. Authentication

Handles user login and session management.

### 1.1 Request OTP
- **Endpoint:** `POST /api/auth/otp/request`
- **Description:** Initiates the login process by sending a One-Time Password to the user's email.
- **Request Body:**
  ```json
  {
    "email": "user@example.com"
  }
  ```
- **Response (Success 200):**
  ```json
  {
    "success": true,
    "message": "OTP has been sent to your email address."
  }
  ```
- **Response (Error 400/500):**
  ```json
  {
    "success": false,
    "error": "Invalid email format or server error."
  }
  ```

### 1.2 Verify OTP & Login
- **Endpoint:** `POST /api/auth/otp/verify`
- **Description:** Verifies the OTP and, if successful, returns a session token (e.g., JWT).
- **Request Body:**
  ```json
  {
    "email": "user@example.com",
    "otp": "123456"
  }
  ```
- **Response (Success 200):**
  ```json
  {
    "success": true,
    "token": "your_jwt_session_token",
    "user": {
      "username": "terminal_user_01",
      "email": "user@example.com"
    }
  }
  ```
- **Response (Error 401):**
  ```json
  {
    "success": false,
    "error": "Invalid OTP."
  }
  ```

### 1.3 Logout
- **Endpoint:** `POST /api/auth/logout`
- **Description:** Invalidates the user's session token.
- **Authentication:** Bearer Token required.
- **Response (Success 200):**
  ```json
  {
    "success": true
  }
  ```

---
## 2. User Profile

Manages user-specific data.

### 2.1 Get Profile
- **Endpoint:** `GET /api/user/profile`
- **Description:** Fetches the profile information for the currently authenticated user.
- **Authentication:** Bearer Token required.
- **Response (Success 200):**
  ```json
  {
    "username": "terminal_user_01",
    "email": "user@example.com"
  }
  ```

### 2.2 Change Password
- **Endpoint:** `PUT /api/user/password`
- **Description:** Updates the password for the authenticated user.
- **Authentication:** Bearer Token required.
- **Request Body:**
  ```json
  {
    "currentPassword": "old_password",
    "newPassword": "new_secure_password"
  }
  ```
- **Response (Success 200):**
  ```json
  {
    "success": true,
    "message": "Password updated successfully."
  }
  ```

---
## 3. Server Management

Handles connections to MCP servers.

### 3.1 Get Connected Servers
- **Endpoint:** `GET /api/servers`
- **Description:** Retrieves a list of MCP servers the user has configured.
- **Authentication:** Bearer Token required.
- **Response (Success 200):**
  ```json
  [
    {
      "id": 1,
      "name": "KALI-MCP-PROD",
      "status": "online"
    },
    {
      "id": 2,
      "name": "DEV-MCP-INSTANCE",
      "status": "offline"
    }
  ]
  ```

### 3.2 Add New Server
- **Endpoint:** `POST /api/servers`
- **Description:** Adds a new MCP server configuration for the user.
- **Authentication:** Bearer Token required.
- **Request Body:**
  ```json
  {
    "serverName": "Production Server",
    "serverUrl": "https://api.example.com/mcp",
    "authMethod": "apiKey", 
    "credentials": {
      "apiKey": "secret-api-key"
    },
    "timeout": 30,
    "sslVerify": true
  }
  ```
- **Response (Success 201):**
  ```json
  {
    "success": true,
    "server": {
      "id": 3,
      "name": "Production Server",
      "status": "online" 
    }
  }
  ```

### 3.3 Test Server Connection
- **Endpoint:** `POST /api/servers/test`
- **Description:** Tests connection details for a potential new server without saving it.
- **Authentication:** Bearer Token required.
- **Request Body:** (Same as Add New Server)
- **Response (Success 200):**
  ```json
  {
    "success": true,
    "message": "Connection successful."
  }
  ```
- **Response (Error 400/500):**
  ```json
  {
    "success": false,
    "error": "Connection failed: Authentication error."
  }
  ```

---
## 4. Real-time Agent Communication (WebSocket)

Handles live interaction with a connected MCP server.

- **Endpoint:** `WS /ws/server/:id`
- **Description:** Establishes a WebSocket connection for a specific server session. The connection should be authenticated using the session token.

### 4.1 Client-to-Server Messages
- **Send Chat Message:**
  ```json
  {
    "type": "chat_message",
    "payload": {
      "text": "Analyze the latest user signups."
    }
  }
  ```
- **Approve Task Node:**
  ```json
  {
    "type": "approve_task",
    "payload": {
      "nodeId": "node1"
    }
  }
  ```

### 4.2 Server-to-Client Messages
- **Connection & Status Update:**
  ```json
  {
    "type": "connection_status",
    "payload": {
      "status": "online",
      "latency": 12,
      "model": "gemini-2.5-flash",
      "memory": { "used": 256, "total": 1024 }
    }
  }
  ```
- **System/Agent/User Message:**
  ```json
  {
    "type": "chat_message",
    "payload": {
      "sender": "AGENT",
      "text": "Understood. Generating a task plan for your request.",
      "timestamp": "10:30:05 PM"
    }
  }
  ```
- **Task Graph Proposal:**
  ```json
  {
    "type": "task_graph_proposal",
    "payload": {
      "nodes": [
        { "id": "node1", "title": "Query User Database", "content": "...", "status": "pending", "position": {...} },
        { "id": "node2", "title": "Fetch API Data", "content": "...", "status": "pending", "position": {...}, "dependsOn": ["node1"] }
      ]
    }
  }
  ```
- **Live Log Entry:**
  ```json
  {
    "type": "log_entry",
    "payload": {
      "timestamp": "10:30:05 PM",
      "message": "Agent responded and proposed a plan."
    }
  }
  ```
- **Artifact Generated:**
  ```json
  {
    "type": "artifact_generated",
    "payload": {
      "name": "daily_report.pdf",
      "url": "/api/artifacts/download/report-xyz"
    }
  }
  ```
